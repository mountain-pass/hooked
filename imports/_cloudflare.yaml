

# requiredEnvNames:
#   DO_SECRETS: |
#       Please create (or import) an environment group named `CLOUDFLARE_SECRETS`, with the following values:

#       ```
#       env:
#         CLOUDFLARE_SECRETS:
#           CLOUDFLARE_BEARER_TOKEN: <your_bearer_token>
#       ```

#       This is for security, and will only be imported when required.

#       A token can be generated from the following link: https://dash.cloudflare.com/profile/api-tokens

#       API Documentation can be found here: https://developers.cloudflare.com/api/

env:
  default:
    BASEURL: https://api.cloudflare.com/client/v4
    CURL_SCRIPT: 'curl -s -H "Content-Type: application/json"'

scripts:
  cloudflare:
    verify auth:
      $envNames: [CLOUDFLARE_SECRETS]
      $cmd: |
        ${CURL_SCRIPT} \
          -H "Authorization: Bearer ${CLOUDFLARE_BEARER_TOKEN}" \
          -X GET "${BASEURL}/user/tokens/verify"

    zones:
      list:
        $envNames: [CLOUDFLARE_SECRETS]
        $image: mountainpass/docker-git-curl
        $cmd: |
          ${CURL_SCRIPT} \
            -H "Authorization: Bearer ${CLOUDFLARE_BEARER_TOKEN}" \
            -X GET "${BASEURL}/zones" \
            | jq -M "[.result[] | {name, value: .id}]"

    dns:
      list:
        $envNames: [CLOUDFLARE_SECRETS]
        $env:
          zone_id:
            $ask: Please choose a zone
            $choices:
              $envNames: [CLOUDFLARE_SECRETS]
              $cmd: j cloudflare zones list
        $cmd: |
          ${CURL_SCRIPT} \
            -H "Authorization: Bearer ${CLOUDFLARE_BEARER_TOKEN}" \
            -X GET ${BASEURL}/zones/${zone_id}/dns_records \
            | jq -M "[.result[] | {id, content, name, proxied, type, ttl, value: .id}]"

      
      create:
        $envNames: [CLOUDFLARE_SECRETS]
        $env:
          zone_id:
            $ask: Please choose a zone
            $choices:
              $envNames: [CLOUDFLARE_SECRETS]
              $cmd: j cloudflare zones list
          NAME:
            $ask: Please enter a Name
          IPADDR:
            $ask: Please enter an IP Address
          PROXIED:
            $ask: Please choose a Proxy type
            $choices:
              - true
              - false
          TYPE:
            $ask: Please choose a DNS Type
            $choices:
              - A
              - CNAME
              - TXT
              - NS
          JSON_PAYLOAD: '{
              "content": "${IPADDR}",
              "name": "${NAME}",
              "proxied": ${PROXIED},
              "type": "${TYPE}",
              "ttl": 1
            }'
        $cmd: |
          ${CURL_SCRIPT} \
            -v \
            -H "Authorization: Bearer ${CLOUDFLARE_BEARER_TOKEN}" \
            -X POST ${BASEURL}/zones/${zone_id}/dns_records \
            --data "${JSON_PAYLOAD}"
      
      delete:
        $envNames: [CLOUDFLARE_SECRETS]
        $env:
          zone_id:
            $ask: Please choose a zone
            $choices:
              $envNames: [CLOUDFLARE_SECRETS]
              $cmd: j cloudflare zones list
          dns_id:
            $ask: Please choose a dns record
            $choices:
              $envNames: [CLOUDFLARE_SECRETS]
              $cmd: |
                ${CURL_SCRIPT} \
                  -H "Authorization: Bearer ${CLOUDFLARE_BEARER_TOKEN}" \
                  -X GET ${BASEURL}/zones/${zone_id}/dns_records \
                  | jq -M "[.result[] | { name: \"[\(.type)] \(.name) = \(.content)\", value: .id }]"
              $sort: alpha
          AREYOUSURE:
            $ask: Are you sure? Cancel now (CTRL+C) if you don't want to continue!
        $cmd: |
          ${CURL_SCRIPT} \
            -v \
            -H "Authorization: Bearer ${CLOUDFLARE_BEARER_TOKEN}" \
            -X DELETE ${BASEURL}/zones/${zone_id}/dns_records/${dns_id}
      
      export:
        $envNames: [CLOUDFLARE_SECRETS]
        $env:
          zone_id:
            $ask: Please choose a zone
            $choices:
              $envNames: [CLOUDFLARE_SECRETS]
              $cmd: j cloudflare zones list
        $cmd: |
          ${CURL_SCRIPT} \
            -H "Authorization: Bearer ${CLOUDFLARE_BEARER_TOKEN}" \
            -X GET ${BASEURL}/zones/${zone_id}/dns_records/export

      import:
        $cmd: echo Not yet implemented. More here -> https://developers.cloudflare.com/api/operations/dns-records-for-a-zone-import-dns-records

      update / patch:
        $cmd: echo Not yet implemented. More here -> https://developers.cloudflare.com/api/operations/dns-records-for-a-zone-patch-dns-record