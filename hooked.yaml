#
# This is the environments definition. You can define (and select) different environments (e.g. '-e english' or '-e spanish')
#
# You can define the following resolution strategies: 
# - (plain string)
# - $env
# - $cmd
# - $stdin
# - $resolve
#
env:
  default:
    username:
      $env: USER
    GIT_COMMIT:
      $cmd: git rev-parse --short HEAD || echo "NOT_AVAILABLE"
    # RECENT_DOWNLOAD:
    #   $stdin: "Please choose a recently Downloaded file:"
    #   $choices:
    #     $cmd: ls -1t ~/Downloads | head -10
    NOW:
      $cmd: date +%Y-%m-%dT%H:%M:%S%z
    JAVASCRIPT:
      $cmd: node -e "console.log(1+1)"
    DOCKER:
      $cmd: docker run --rm node:lts-alpine -e "console.log(1+2)"

# This is the scripts section. It uses hierarchies to guide the user. Go as deep as you want!
scripts:
  echo:
    $cmd: echo now=${NOW}, javascript=${JAVASCRIPT}, docker=${DOCKER}
  install:
    local:
      $cmd: npm i -g --force .
    global:
      $cmd: npm i -g --force @mountainpass/hooked-cli
  uninstall:
    local:
      $cmd: npm uninstall -g --force hooked
    global:
      $cmd: npm uninstall -g --force @mountainpass/hooked-cli
  lerna:
    graph:
      $cmd: npx nx graph
    bootstrap:
      $cmd: npx lerna bootstrap
    install:
      $cmd: npx lerna exec --scope @mountainpass/* npm install
    build:
      $cmd: npx lerna run --scope @mountainpass/* build
    bump:
      $cmd: npx lerna version patch --yes --force-publish --message '%s [skip ci]'
    publish:
      $cmd: npx lerna publish from-package --yes
  publish:
    $cmd: |
      #!/bin/sh -e
      npx lerna exec --scope @mountainpass/* npm install
      npx lerna run --scope @mountainpass/* build
      npx lerna version patch --yes --force-publish --message '%s [skip ci]'
      npx lerna publish from-package --yes


